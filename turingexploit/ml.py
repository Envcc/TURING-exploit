# turingexploit/ml.py

import numpy as np
import logging
from collections import deque
import random
import torch
import torch.nn as nn
import torch.optim as optim

class QNetwork(nn.Module):
    def __init__(self, state_size, action_size):
        super(QNetwork, self).__init__()
        self.fc1 = nn.Linear(state_size, 64)
        self.fc2 = nn.Linear(64, 64)
        self.fc3 = nn.Linear(64, action_size)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        return self.fc3(x)

class DQNAgent:
    def __init__(self, graph, capacities, alpha=0.1, gamma=0.9, epsilon=0.1, episodes=1000, decay_rate=0.99, min_epsilon=0.01, adaptive_lr=True, replay_buffer_size=1000, batch_size=64, state_size=4, action_size=4):
        self.graph = graph
        self.capacities = capacities
        self.alpha = alpha
        self.gamma = gamma
        self.epsilon = epsilon
        self.episodes = episodes
        self.decay_rate = decay_rate
        self.min_epsilon = min_epsilon
        self.q_table = {node: {neighbor: 0 for neighbor in graph[node]} for node in graph.keys()}
        self.adaptive_lr = adaptive_lr
        self.replay_buffer = deque(maxlen=replay_buffer_size)
        self.batch_size = batch_size
        self.state_size = state_size
        self.action_size = action_size
        self.q_network = QNetwork(state_size, action_size)
        self.target_network = QNetwork(state_size, action_size)
        self.optimizer = optim.Adam(self.q_network.parameters(), lr=alpha)
        self.loss_fn = nn.MSELoss()
        logging.basicConfig(level=logging.INFO)

    def adaptive_learning_rate(self, episode):
        return max(0.01, min(1.0, 1.0 - np.log10((episode + 1) / 25)))

    def choose_action(self, state, strategy='epsilon-greedy'):
        state_tensor = torch.FloatTensor(state).unsqueeze(0)
        if np.random.rand() < self.epsilon:
            action = np.random.choice(self.action_size)
        else:
            with torch.no_grad():
                q_values = self.q_network(state_tensor)
                action = torch.argmax(q_values).item()
        return action

    def update_q_value(self, state, action, reward, next_state, episode):
        state_tensor = torch.FloatTensor(state).unsqueeze(0)
        next_state_tensor = torch.FloatTensor(next_state).unsqueeze(0)
        reward_tensor = torch.FloatTensor([reward]).unsqueeze(0)

        with torch.no_grad():
            max_next_q_value = self.target_network(next_state_tensor).max(1)[0].unsqueeze(1)
            target_q_value = reward_tensor + (self.gamma * max_next_q_value)

        q_value = self.q_network(state_tensor)[0][action].unsqueeze(0)
        loss = self.loss_fn(q_value, target_q_value)

        self.optimizer.zero_grad()
        loss.backward()
        self.optimizer.step()

    def store_experience(self, state, action, reward, next_state):
        self.replay_buffer.append((state, action, reward, next_state))

    def sample_experience(self):
        return random.sample(self.replay_buffer, self.batch_size)

    def train_from_experience(self):
        if len(self.replay_buffer) < self.batch_size:
            return
        batch = self.sample_experience()
        for state, action, reward, next_state in batch:
            self.update_q_value(state, action, reward, next_state, 0)

    def sync_target_network(self):
        self.target_network.load_state_dict(self.q_network.state_dict())

    def log_progress(self, episode, total_reward):
        logging.info(f'Episode {episode}: Total Reward: {total_reward}, Epsilon: {self.epsilon}')

    def extract_policy(self):
        optimal_policy = {state: max(actions, key=actions.get) for state, actions in self.q_table.items()}
        return optimal_policy

    def train(self, strategy='epsilon-greedy'):
        for episode in range(self.episodes):
            state = np.random.choice(self.state_size)  # Assuming initial state is chosen randomly
            total_reward = 0
            while True:  # Assuming an infinite loop until terminal state is reached
                action = self.choose_action(state, strategy)
                next_state, reward = self.step(state, strategy, episode)
                self.store_experience(state, action, reward, next_state)
                self.train_from_experience()
                state = next_state
                total_reward += reward
                if next_state == 'D':  # Assuming 'D' is the terminal state
                    break
            self.epsilon = max(self.min_epsilon, self.epsilon * self.decay_rate)
            self.log_progress(episode, total_reward)
            if episode % 10 == 0:
                self.sync_target_network()
        return self.extract_policy()

# turingexploit/visualization.py

import networkx as nx
import matplotlib.pyplot as plt

def plot_graph(graph, capacities):
    G = nx.DiGraph()

    for node, edges in graph.items():
        for neighbor, weight in edges.items():
            G.add_edge(node, neighbor, weight=weight, capacity=capacities.get((node, neighbor), 0))

    pos = nx.spring_layout(G)
    edge_labels = nx.get_edge_attributes(G, 'weight')
    edge_capacities = nx.get_edge_attributes(G, 'capacity')

    nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=2000, font_size=10, font_weight='bold')
    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, label_pos=0.3)
    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_capacities, label_pos=0.7, font_color='red')

    plt.title('Network Graph with Weights and Capacities')
    plt.show()

def plot_routes(graph, routes):
    G = nx.DiGraph()

    for node, edges in graph.items():
        for neighbor, weight in edges.items():
            G.add_edge(node, neighbor, weight=weight)

    pos = nx.spring_layout(G)
    
    for destination, paths in routes.items():
        for path in paths:
            edges_in_path = [(path[i], path[i + 1]) for i in range(len(path) - 1)]
            nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=2000, font_size=10, font_weight='bold')
            nx.draw_networkx_edges(G, pos, edgelist=edges_in_path, edge_color='r', width=2)
            plt.title(f'Routes from A to {destination}')
            plt.show()
